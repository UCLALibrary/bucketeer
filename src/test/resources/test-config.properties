#
# Testing properties configuration values are fed by Maven POM properties, which can be set at runtime in the system
# settings.xml file (often at /etc/maven/settings.xml).
#

# S3 configuration options
bucketeer.s3.bucket=${bucketeer.s3.bucket}
bucketeer.s3.access_key=${bucketeer.s3.access_key}
bucketeer.s3.secret_key=${bucketeer.s3.secret_key}
bucketeer.s3.region=${bucketeer.s3.region}

# The number of active S3 upload requests allowed at one time
s3.max.requests=${s3.max.requests}

# The maximum number of attempts we'll make to upload an item
s3.max.retries=${s3.max.retries}

# The delay in seconds before pending S3 requests are re-queued
s3.requeue.delay=${s3.requeue.delay}

# How many instances of the S3 upload verticle are created
s3.uploader.instances=${s3.uploader.instances}

# How many threads each S3 upload verticle instance is allowed to use
s3.uploader.threads=${s3.uploader.threads}

# The URL of our IIIF server (including prefix, if any)
bucketeer.iiif.url=${bucketeer.iiif.url}

# Thumbnail size for images served by the IIIF server
bucketeer.thumbnail.size=${bucketeer.thumbnail.size}

# The maximum size TIFF image we'll attempt to process
bucketeer.max.source.file.size=${bucketeer.max.source.file.size}

# Where the source images are mounted on the local file system
bucketeer.fs.image.mount=${bucketeer.fs.image.mount}
bucketeer.fs.image.prefix=${bucketeer.fs.image.prefix}

# We can also connect to Lambda and let it do the work of converting to JPEG-2000s
lambda.s3.bucket=${lambda.s3.bucket}

# Slack configuration options
bucketeer.slack.oauth_token=${bucketeer.slack.oauth_token}
bucketeer.slack.channel_id=${bucketeer.slack.channel_id}
bucketeer.slack.error_channel_id=${bucketeer.slack.error_channel_id}
bucketeer.slack.test_user_handle=${bucketeer.slack.test_user_handle}

# Configure the connection to Fester
fester.url=${fester.url}

# Configure the connection to a second Bucketeer that will handle large images
large.image.url=${large.image.url}

# Configure the mount point of the filesystem where output CSVs should be written to
bucketeer.fs.csv.mount=${bucketeer.fs.csv.mount}

# Configure the callback URL for batch job images larger than AWS Lambda's processing abilities. A Bucketeer that has
# been configured to send large images to a different Bucketeer for processing will send this callback URL along with
# that request so that the batch job status queue can be updated with the result from the large image processing that
# takes place on the other Bucketeer.
batch.callback.url=${batch.callback.url}

# Username and Password to access IIIF Cantaloupe cache
bucketeer.iiif.cache.user=${bucketeer.iiif.cache.user}
bucketeer.iiif.cache.password=${bucketeer.iiif.cache.password}
