<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>bucketeer</artifactId>
  <version>0.2.3-SNAPSHOT</version>
  <name>Bucketeer</name>
  <description>A TIFF to JP2 to S3 bucket microservice</description>
  <url>https://github.com/uclalibrary/bucketeer</url>

  <licenses>
    <license>
      <name>The 3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-clause</url>
    </license>
  </licenses>

  <scm>
    <connection>scm:git:git@github.com:uclalibrary/bucketeer.git</connection>
    <developerConnection>scm:git:git@github.com:uclalibrary/bucketeer.git</developerConnection>
    <url>git@github.com:uclalibrary/bucketeer.git</url>
  </scm>

  <issueManagement>
    <system>GitHub</system>
    <url>https://github.com/uclalibrary/bucketeer/issues</url>
  </issueManagement>

  <developers>
    <developer>
      <id>ksclarke</id>
      <name>Kevin S. Clarke</name>
      <email>ksclarke@ksclarke.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/New_York</timezone>
    </developer>
    <developer>
      <id>hardyoyo</id>
      <name>Hardy Pottinger</name>
      <email>hardy.pottinger@gmail.com</email>
    </developer>
    <developer>
      <id>cachemeoutside</id>
      <name>Anthony Vuong</name>
      <email>avuong@cachemeoutside.io</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>markmatney</id>
      <name>Mark A. Matney, Jr.</name>
      <email>mmatney@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
    <developer>
      <id>DRickard</id>
      <name>David Rickard</name>
      <email>drickard1967@library.ucla.edu</email>
      <organization>UCLA Library</organization>
      <organizationUrl>http://github.com/uclalibrary</organizationUrl>
      <timezone>America/Los_Angeles</timezone>
    </developer>
  </developers>

  <properties>
    <!-- What version of Kakadu are we using, if any? -->
    <kakadu.version></kakadu.version>

    <!-- If we want to build something other than HEAD -->
    <bucketeer.version>latest</bucketeer.version>

    <!-- Git repo with Kakadu source code (ours is private; override with yours) -->
    <kakadu.git.repo>scm:git:git@github.com:uclalibrary/kakadu.git</kakadu.git.repo>

    <vertx.version>3.9.4</vertx.version>
    <vertx.super.s3.version>1.2.0</vertx.super.s3.version>
    <slf4j.ext.version>1.7.26</slf4j.ext.version>
    <aws.sdk.version>1.11.846</aws.sdk.version>
    <commons.codec.version>1.14</commons.codec.version>
    <aws.v4.signer.version>1.3</aws.v4.signer.version>
    <opencsv.version>4.6</opencsv.version>
    <moirai.version>2.0.0</moirai.version>
    <beanutils.version>1.9.4</beanutils.version>
    <woodstox.version>5.1.0</woodstox.version>
    <freelib.utils.version>2.1.0</freelib.utils.version>
    <freelib.maven.version>0.1.2</freelib.maven.version>
    <netty.epoll.version>4.1.37.Final</netty.epoll.version>
    <maven.failsafe.plugin.version>2.18.1</maven.failsafe.plugin.version>
    <jslack.version>1.7.8</jslack.version>
    <snakeyaml.version>1.26</snakeyaml.version>
    <oshi.version>4.0.0</oshi.version>
    <jackson.version>2.10.1</jackson.version>
    <jsoup.version>1.13.1</jsoup.version>

    <!-- Build plug-in versions -->
    <scm.plugin.version>1.11.2</scm.plugin.version>
    <clean.plugin.version>3.1.0</clean.plugin.version>
    <shade.plugin.version>2.4.3</shade.plugin.version>
    <vertx.plugin.version>1.0.18</vertx.plugin.version>
    <deploy.plugin.version>2.8.2</deploy.plugin.version>
    <codacy.plugin.version>1.2.0</codacy.plugin.version>
    <jcip.annotations.version>1.0-1</jcip.annotations.version>
    <jacoco.maven.plugin.version>0.8.5</jacoco.maven.plugin.version>
    <docker.maven.plugin.version>0.33.0</docker.maven.plugin.version>
    <maven.download.plugin.version>1.3.0</maven.download.plugin.version>

    <!-- These properties provide the ability to override the running of any type of test -->
    <skipITs>false</skipITs>
    <skipFTs>false</skipFTs>
    <skipUTs>false</skipUTs>
    <skipFfTs>false</skipFfTs>

    <!-- Whether auto-reloading should be turned on for the live test profile -->
    <live.test.reloads>false</live.test.reloads>

    <!-- What level of logging we want to see, by default, in our tests and default container config -->
    <logLevel>ERROR</logLevel>
    <testLogLevel>ERROR</testLogLevel>

    <!-- Name of the main Vert.x verticle -->
    <main.verticle>edu.ucla.library.bucketeer.verticles.MainVerticle</main.verticle>

    <!-- The location of images used for testing -->
    <image.root>src/test/resources/images</image.root>

    <!-- AWS configuration properties -->
    <bucketeer.s3.region>us-east-1</bucketeer.s3.region>
    <bucketeer.s3.bucket>bucketeer-test-data</bucketeer.s3.bucket>
    <bucketeer.s3.access_key>YOUR_ACCESS_KEY</bucketeer.s3.access_key>
    <bucketeer.s3.secret_key>YOUR_SECRET_KEY</bucketeer.s3.secret_key>

    <!-- Slack configuration properties -->
    <bucketeer.slack.test_user_handle>YOUR_SLACK_TEST_USER_HANDLE</bucketeer.slack.test_user_handle>
    <bucketeer.slack.oauth_token>YOUR_SLACK_OAUTH_TOKEN</bucketeer.slack.oauth_token>
    <bucketeer.slack.channel_id>YOUR_SLACK_CHANNEL_ID</bucketeer.slack.channel_id>
    <bucketeer.slack.error_channel_id>YOUR_SLACK_ERROR_CHANNEL_ID</bucketeer.slack.error_channel_id>

    <!-- We can use a lambda kakadu converter if we send things to its bucket -->
    <lambda.s3.bucket>test-bucketeer-tiff</lambda.s3.bucket>

    <!-- The maximum number of active S3 upload requests allowed at a time -->
    <s3.max.requests>20</s3.max.requests>

    <!-- The delay in seconds before pending S3 requests are re-queued -->
    <s3.requeue.delay>1</s3.requeue.delay>

    <!-- The number of instances of the S3 upload verticle are created -->
    <s3.uploader.instances>1</s3.uploader.instances>

    <!-- The number of threads per instance; a number <= 0 sets to total logical cores minus one -->
    <s3.uploader.threads>1</s3.uploader.threads>

    <!-- IIIF server URL (including the prefix, if there is one) -->
    <bucketeer.iiif.url>YOUR_IIIF_SERVER_URL</bucketeer.iiif.url>

    <!-- Bucketeer server configured to handle large images -->
    <large.image.url>http://localhost:8888</large.image.url>

    <!-- Fester manifestor collections endpoint -->
    <fester.url>http://localhost:9999/collections</fester.url>

    <!-- The string template of a URL endpoint that updates the batch jobs status queue. The 'batch.callback.url' is sent 
      as a callback URL when a large image processing request is sent to a different Bucketeer instance (to its loadImage endpoint). 
      Its expected values correspond to the 'job-name' and 'image-id' variables. More details can be found in the Bucketeer OpenAPI 
      specification. -->
    <batch.callback.url>http://localhost:8888/batch/jobs/{}/{}/</batch.callback.url>

    <!-- Thumbnail size for images served by the IIIF server -->
    <bucketeer.thumbnail.size>!200,200</bucketeer.thumbnail.size>

    <!-- The maximum size TIFF image we'll attempt to process; default: 300 MB -->
    <bucketeer.max.source.file.size>300000000</bucketeer.max.source.file.size>

    <!-- Where the source images are mounted on the local file system -->
    <bucketeer.fs.image.mount>.</bucketeer.fs.image.mount>
    <bucketeer.fs.image.prefix>GenericFilePathPrefix</bucketeer.fs.image.prefix>

    <!-- The location of the directory, from the container's perspective, that processed CSVs should be written to -->
    <bucketeer.fs.csv.mount>/csv/</bucketeer.fs.csv.mount>

    <!-- The Docker registry user and password used for publishing images -->
    <docker.registry.username />
    <docker.registry.password />

    <!-- The registry account, if supplied, must end with a slash (e.g. "account/") -->
    <docker.registry.account />

    <!-- The artifact is qualified if it's built with Kakadu -->
    <artifact.qualifier></artifact.qualifier>
  </properties>

  <dependencies>

    <!-- Vert.x is a toolkit for building reactive applications on the JVM -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-client</artifactId>
      <version>${vertx.version}</version>
    </dependency>

    <!-- OpenAPI for Vert.x - https://vertx.io/docs/vertx-web-api-contract/java/ -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-web-api-contract</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <version>${snakeyaml.version}</version>
    </dependency>
    <!-- Below is a dependency that needs updating due to security issue (may be able to remove in future) -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-ext</artifactId>
      <version>${slf4j.ext.version}</version>
    </dependency>

    <!-- A Vert.x plug-in for more flexible configuration control -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-config</artifactId>
      <version>${vertx.version}</version>
    </dependency>
    <!-- Logger -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Feature flag library -->
    <dependency>
      <groupId>com.nike.moirai</groupId>
      <artifactId>moirai-core</artifactId>
      <version>${moirai.version}</version>
    </dependency>
    <dependency>
      <groupId>com.nike.moirai</groupId>
      <artifactId>moirai-typesafeconfig</artifactId>
      <version>${moirai.version}</version>
    </dependency>

    <!-- Some basic utility classes -->
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>freelib-utils</artifactId>
      <version>${freelib.utils.version}</version>
    </dependency>
    <dependency>
      <groupId>com.opencsv</groupId>
      <artifactId>opencsv</artifactId>
      <version>${opencsv.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-beanutils</groupId>
      <artifactId>commons-beanutils</artifactId>
      <version>${beanutils.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <artifactId>jackson-dataformat-xml</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.datatype</groupId>
      <artifactId>jackson-datatype-jdk8</artifactId>
      <version>${jackson.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.woodstox</groupId>
      <artifactId>woodstox-core</artifactId>
      <version>${woodstox.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.oshi</groupId>
      <artifactId>oshi-core</artifactId>
      <version>${oshi.version}</version>
    </dependency>
    <!-- Generic AWS S3 library -->
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-s3</artifactId>
      <version>${aws.sdk.version}</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>${commons.codec.version}</version>
    </dependency>
    <!-- S3 library for the Vert.x toolkit -->
    <dependency>
      <groupId>info.freelibrary</groupId>
      <artifactId>vertx-super-s3</artifactId>
      <version>${vertx.super.s3.version}</version>
    </dependency>
    <dependency>
      <groupId>com.github.seratch</groupId>
      <artifactId>jslack</artifactId>
      <version>${jslack.version}</version>
    </dependency>

    <!-- Below dependencies only used for testing -->
    <dependency>
      <groupId>com.github.stephenc.jcip</groupId>
      <artifactId>jcip-annotations</artifactId>
      <version>${jcip.annotations.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-unit</artifactId>
      <version>${vertx.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jsoup</groupId>
      <artifactId>jsoup</artifactId>
      <version>${jsoup.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <excludes>
          <exclude>checkstyle.xml</exclude>
          <exclude>docker/logback.xml</exclude>
        </excludes>
      </resource>
      <resource>
        <directory>src/main/resources/docker</directory>
        <filtering>true</filtering>
        <includes>
          <include>logback.xml</include>
        </includes>
        <targetPath>${project.basedir}/src/main/docker/configs</targetPath>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <excludes>
          <!-- We don't need to filter binary files -->
          <exclude>images/*.tif</exclude>
          <exclude>images/*.jpx</exclude>
          <exclude>*.enc</exclude>
        </excludes>
      </testResource>
    </testResources>

    <plugins>
      <!-- Deploying Docker image instead of a Jar file so skip this -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${deploy.plugin.version}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- Clean the logback.xml file before running the shade plugin to package the Jar -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${clean.plugin.version}</version>
        <executions>
          <execution>
            <id>auto-clean-logging-config</id>
            <phase>package</phase>
            <goals>
              <goal>clean</goal>
            </goals>
            <configuration>
              <excludeDefaultDirectories>true</excludeDefaultDirectories>
              <failOnError>false</failOnError>
              <filesets>
                <fileset>
                  <directory>target/classes</directory>
                  <includes>
                    <include>logback.xml</include>
                  </includes>
                  <followSymlinks>false</followSymlinks>
                </fileset>
              </filesets>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- The build-helper plug-in gets us a dynamic port for testing -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <configuration>
          <portNames>
            <portName>http.port</portName>
            <portName>ff.on.http.port</portName>
            <portName>ff.off.http.port</portName>
          </portNames>
        </configuration>
        <executions>
          <execution>
            <id>reserve-port</id>
            <phase>initialize</phase>
            <goals>
              <goal>reserve-network-port</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Generate the MessageCodes class from the message codes resource file -->
      <!--<![CDATA[
        To run generate-codes plugin outside of a full build: mvn info.freelibrary:freelib-utils:generate-codes
      ]]>-->
      <plugin>
        <groupId>info.freelibrary</groupId>
        <artifactId>freelib-maven-plugins</artifactId>
        <version>${freelib.maven.version}</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>generate-codes</goal>
            </goals>
            <configuration>
              <generatedSourcesDirectory>${project.basedir}/src/main/generated</generatedSourcesDirectory>
              <messageFiles>
                <messageFile>${project.basedir}/src/main/resources/bucketeer_messages.xml</messageFile>
              </messageFiles>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copy static pages over to the application's Web root -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-web-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/webroot</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/webroot</directory>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-openapi-yaml</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/webroot/docs</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/resources</directory>
                  <filtering>true</filtering>
                  <includes>
                    <include>bucketeer.yaml</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- PMD is an extensible cross-language static code analyzer -->
      <plugin>
        <artifactId>maven-pmd-plugin</artifactId>
      </plugin>

      <!-- Generate HTML Javadocs for the project's code -->
      <plugin>
        <artifactId>maven-javadoc-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>info.freelibrary</groupId>
            <artifactId>freelib-resources</artifactId>
            <version>${freelib.resources.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <stylesheetfile>javadocs.css</stylesheetfile>
          <nonavbar>true</nonavbar>
          <show>public</show>
          <nosince>true</nosince>
          <notimestamp>true</notimestamp>
          <bottom> </bottom>
          <detectLinks>false</detectLinks>
          <additionalJOptions>
            <additionalJOption>-J-Dhttp.agent=maven-javadoc-plugin-${project.name}</additionalJOption>
          </additionalJOptions>
          <links>
            <link>https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/</link>
          </links>
          <sourcepath>src/main/java:src/main/generated</sourcepath>
        </configuration>
        <executions>
          <execution>
            <id>site-javadocs</id>
            <phase>site</phase>
            <goals>
              <goal>javadoc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Checkstyle ensures adherence to coding standards -->
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <consoleOutput>true</consoleOutput>
          <logViolationsToConsole>true</logViolationsToConsole>
          <violationSeverity>warning</violationSeverity>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
        </configuration>
      </plugin>

      <!-- Maven dependency helps freelib-resources copy files into the project -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.shared</groupId>
            <artifactId>maven-dependency-analyzer</artifactId>
            <version>${maven.dependency.analyzer.version}</version>
            <exclusions>
              <exclusion>
                <artifactId>maven-project</artifactId>
                <groupId>org.apache.maven</groupId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>unpack-build-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>info.freelibrary</groupId>
                  <artifactId>freelib-resources</artifactId>
                  <version>${freelib.resources.version}</version>
                  <type>jar</type>
                  <includes>eclipse/**/*,checkstyle/**/*,pmd/**/*,travis/**/*</includes>
                  <outputDirectory>${basedir}/target/build-resources</outputDirectory>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Builds and runs our Docker containers -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <configuration>
          <logStdout>true</logStdout>
          <verbose>true</verbose>
          <imagesMap>
            <bucketeer>
              <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
              <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
              <name>${docker.registry.account}${project.artifactId}${artifact.qualifier}:%l</name>
              <build>
                <dockerFile>${project.basedir}/src/main/docker/Dockerfile</dockerFile>
                <assembly>
                  <inline>
                    <fileSets>
                      <fileSet>
                        <!-- The directory where we can find our Maven-built artifact -->
                        <directory>${project.basedir}/target/</directory>
                        <!-- We don't want directory structure on output, just the artifact -->
                        <outputDirectory>.</outputDirectory>
                        <includes>
                          <include>${project.artifactId}-${project.version}.jar</include>
                        </includes>
                      </fileSet>
                    </fileSets>
                  </inline>
                </assembly>
              </build>
              <run>
                <containerNamePattern>bucketeer</containerNamePattern>
                <ports>
                  <port>${http.port}:8888</port> <!-- Start test container on an available host port -->
                </ports>
                <volumes>
                  <bind>
                    <volume>${image.root}:/images/</volume>
                  </bind>
                </volumes>
                <env>
                  <LAMBDA_S3_BUCKET>${lambda.s3.bucket}</LAMBDA_S3_BUCKET>
                  <BUCKETEER_S3_BUCKET>${bucketeer.s3.bucket}</BUCKETEER_S3_BUCKET>
                  <BUCKETEER_S3_REGION>${bucketeer.s3.region}</BUCKETEER_S3_REGION>
                  <BUCKETEER_S3_ACCESS_KEY>${bucketeer.s3.access_key}</BUCKETEER_S3_ACCESS_KEY>
                  <BUCKETEER_S3_SECRET_KEY>${bucketeer.s3.secret_key}</BUCKETEER_S3_SECRET_KEY>
                  <BUCKETEER_IIIF_URL>${bucketeer.iiif.url}</BUCKETEER_IIIF_URL>
                  <SLACK_TEST_USER_HANDLE>${bucketeer.slack.test_user_handle}</SLACK_TEST_USER_HANDLE>
                  <BUCKETEER_SLACK_OAUTH_TOKEN>${bucketeer.slack.oauth_token}</BUCKETEER_SLACK_OAUTH_TOKEN>
                  <BUCKETEER_SLACK_ERROR_CHANNEL_ID>${bucketeer.slack.error_channel_id}</BUCKETEER_SLACK_ERROR_CHANNEL_ID>
                  <BUCKETEER_SLACK_CHANNEL_ID>${bucketeer.slack.channel_id}</BUCKETEER_SLACK_CHANNEL_ID>
                  <BUCKETEER_FS_IMAGE_PREFIX>GenericFilePathPrefix</BUCKETEER_FS_IMAGE_PREFIX>
                  <BUCKETEER_FS_IMAGE_MOUNT>/images/</BUCKETEER_FS_IMAGE_MOUNT>
                  <HEAP_SIZE>1g</HEAP_SIZE>
                </env>
                <wait>
                  <http>
                    <url>http://localhost:${http.port}</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                </wait>
              </run>
            </bucketeer>
            <bucketeer-ff-off>
              <name>${docker.registry.account}${project.artifactId}${artifact.qualifier}:%l</name>
              <run>
                <skip>${skipFfTs}</skip>
                <containerNamePattern>bucketeer-ff-off</containerNamePattern>
                <ports>
                  <port>${ff.off.http.port}:8888</port> <!-- Start test container on an available host port -->
                </ports>
                <volumes>
                  <bind>
                    <volume>${image.root}:/images/</volume>
                  </bind>
                </volumes>
                <env>
                  <LAMBDA_S3_BUCKET>${lambda.s3.bucket}</LAMBDA_S3_BUCKET>
                  <BUCKETEER_S3_BUCKET>${bucketeer.s3.bucket}</BUCKETEER_S3_BUCKET>
                  <BUCKETEER_S3_REGION>${bucketeer.s3.region}</BUCKETEER_S3_REGION>
                  <BUCKETEER_S3_ACCESS_KEY>${bucketeer.s3.access_key}</BUCKETEER_S3_ACCESS_KEY>
                  <BUCKETEER_S3_SECRET_KEY>${bucketeer.s3.secret_key}</BUCKETEER_S3_SECRET_KEY>
                  <BUCKETEER_IIIF_URL>${bucketeer.iiif.url}</BUCKETEER_IIIF_URL>
                  <SLACK_TEST_USER_HANDLE>${bucketeer.slack.test_user_handle}</SLACK_TEST_USER_HANDLE>
                  <BUCKETEER_SLACK_OAUTH_TOKEN>${bucketeer.slack.oauth_token}</BUCKETEER_SLACK_OAUTH_TOKEN>
                  <BUCKETEER_SLACK_ERROR_CHANNEL_ID>${bucketeer.slack.error_channel_id}</BUCKETEER_SLACK_ERROR_CHANNEL_ID>
                  <BUCKETEER_SLACK_CHANNEL_ID>${bucketeer.slack.channel_id}</BUCKETEER_SLACK_CHANNEL_ID>
                  <BUCKETEER_FS_IMAGE_PREFIX>GenericFilePathPrefix</BUCKETEER_FS_IMAGE_PREFIX>
                  <BUCKETEER_FS_IMAGE_MOUNT>/images/</BUCKETEER_FS_IMAGE_MOUNT>
                  <FEATURE_FLAGS>https://iiif-manifest-store.s3.amazonaws.com/test-bucketeer-features-off.conf</FEATURE_FLAGS>
                  <HEAP_SIZE>300m</HEAP_SIZE>
                </env>
                <wait>
                  <http>
                    <url>http://localhost:${ff.off.http.port}</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                </wait>
              </run>
            </bucketeer-ff-off>
            <bucketeer-ff-on>
              <name>${docker.registry.account}${project.artifactId}${artifact.qualifier}:%l</name>
              <run>
                <skip>${skipFfTs}</skip>
                <containerNamePattern>bucketeer-ff-on</containerNamePattern>
                <ports>
                  <port>${ff.on.http.port}:8888</port> <!-- Start test container on an available host port -->
                </ports>
                <volumes>
                  <bind>
                    <volume>${image.root}:/images/</volume>
                    <volume>bucketeer-csv-temp-volume:/csv/</volume>
                  </bind>
                </volumes>
                <env>
                  <LAMBDA_S3_BUCKET>${lambda.s3.bucket}</LAMBDA_S3_BUCKET>
                  <BUCKETEER_S3_BUCKET>${bucketeer.s3.bucket}</BUCKETEER_S3_BUCKET>
                  <BUCKETEER_S3_REGION>${bucketeer.s3.region}</BUCKETEER_S3_REGION>
                  <BUCKETEER_S3_ACCESS_KEY>${bucketeer.s3.access_key}</BUCKETEER_S3_ACCESS_KEY>
                  <BUCKETEER_S3_SECRET_KEY>${bucketeer.s3.secret_key}</BUCKETEER_S3_SECRET_KEY>
                  <BUCKETEER_IIIF_URL>${bucketeer.iiif.url}</BUCKETEER_IIIF_URL>
                  <SLACK_TEST_USER_HANDLE>${bucketeer.slack.test_user_handle}</SLACK_TEST_USER_HANDLE>
                  <BUCKETEER_SLACK_OAUTH_TOKEN>${bucketeer.slack.oauth_token}</BUCKETEER_SLACK_OAUTH_TOKEN>
                  <BUCKETEER_SLACK_ERROR_CHANNEL_ID>${bucketeer.slack.error_channel_id}</BUCKETEER_SLACK_ERROR_CHANNEL_ID>
                  <BUCKETEER_SLACK_CHANNEL_ID>${bucketeer.slack.channel_id}</BUCKETEER_SLACK_CHANNEL_ID>
                  <BUCKETEER_FS_IMAGE_PREFIX>GenericFilePathPrefix</BUCKETEER_FS_IMAGE_PREFIX>
                  <BUCKETEER_FS_IMAGE_MOUNT>/images/</BUCKETEER_FS_IMAGE_MOUNT>
                  <BUCKETEER_FS_CSV_MOUNT>/csv/</BUCKETEER_FS_CSV_MOUNT>
                  <FEATURE_FLAGS>https://iiif-manifest-store.s3.amazonaws.com/test-bucketeer-features-on.conf</FEATURE_FLAGS>
                  <HEAP_SIZE>300m</HEAP_SIZE>
                </env>
                <wait>
                  <http>
                    <url>http://localhost:${ff.on.http.port}</url>
                    <method>GET</method>
                    <status>200</status>
                  </http>
                </wait>
              </run>
            </bucketeer-ff-on>
          </imagesMap>
        </configuration>
        <executions>

          <!-- Builds the Docker image -->
          <execution>
            <id>docker-build</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>build</goal>
            </goals>
          </execution>

          <!-- Creates a mock volume for storing processed CSVs -->
          <execution>
            <id>docker-create-volume</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>volume-create</goal>
            </goals>
            <configuration>
              <volumes>
                <volume>
                  <name>bucketeer-csv-temp-volume</name>
                  <driver>local</driver>
                  <opts>
                    <type>tmpfs</type>
                    <device>tmpfs</device>
                    <o>size=100m,uid=1000,mode=777</o>
                  </opts>
                  <labels>
                    <volatileData>true</volatileData>
                  </labels>
                </volume>
              </volumes>
            </configuration>
          </execution>

          <!-- Starts the Docker container for integration testing -->
          <execution>
            <id>docker-start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
            <configuration>
              <showLogs>true</showLogs>
            </configuration>
          </execution>

          <!-- Stops the integration tests' Docker container -->
          <execution>
            <id>docker-stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
            <configuration>
              <allContainers>true</allContainers>
              <stopNamePattern>bucket*</stopNamePattern>
            </configuration>
          </execution>

          <!-- Removes the mock volume for storing processed CSVs -->
          <execution>
            <id>docker-volume-remove</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>volume-remove</goal>
            </goals>
            <configuration>
              <volumes>
                 <volume>
                   <name>bucketeer-csv-temp-volume</name>
                 </volume>
              </volumes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Surefire runs the project's unit tests -->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*IT.java</exclude> <!-- Includes *KakaduIT.java -->
            <exclude>**/*FT.java</exclude>
            <exclude>**/*FfOnT.java</exclude>
            <exclude>**/*FfOffT.java</exclude>
          </excludes>
          <forkCount>1</forkCount><!-- Multiple forks result in multiple containers -->
          <useSystemClassLoader>false</useSystemClassLoader> <!-- Override parent project setting -->
          <skipAfterFailureCount>1</skipAfterFailureCount>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <vertx.test.port>${http.port}</vertx.test.port>
            <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
            <jdk.tls.client.protocols>TLSv1.2</jdk.tls.client.protocols>
            <bucketeer.slack.error_channel_id>dev-null</bucketeer.slack.error_channel_id>
          </systemPropertyVariables>
          <skipTests>${skipUTs}</skipTests>
          <argLine>${jacoco.agent.arg}</argLine>
        </configuration>
      </plugin>

      <!-- This incantation of Failsafe runs the non-Kakadu integration and feature-flag tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/*Test.java</exclude>
          </excludes>
          <systemPropertyVariables>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
            <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
            <jdk.tls.client.protocols>TLSv1.2</jdk.tls.client.protocols>
            <http.port>${http.port}</http.port>
          </systemPropertyVariables>
          <argLine>${jacoco.agent.arg}</argLine>
        </configuration>
        <executions>
          <execution>
            <id>feature-flags-off</id>
            <phase>integration-test</phase>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*FfOffT.java</include>
              </includes>
              <argLine>${jacoco.agent.arg}</argLine>
              <skipTests>${skipFfTs}</skipTests>
              <systemPropertyVariables>
                <http.port>${ff.off.http.port}</http.port>
              </systemPropertyVariables>
            </configuration>
          </execution>
          <execution>
            <id>feature-flags-on</id>
            <phase>integration-test</phase>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*FfOnT.java</include>
              </includes>
              <argLine>${jacoco.agent.arg}</argLine>
              <skipTests>${skipFfTs}</skipTests>
              <systemPropertyVariables>
                <http.port>${ff.on.http.port}</http.port>
                <bucketeer.fs.csv.mount>${bucketeer.fs.csv.mount}</bucketeer.fs.csv.mount>
              </systemPropertyVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- The Vert.x plug-in enables running the application from within Maven for development -->
      <plugin>
        <groupId>io.reactiverse</groupId>
        <artifactId>vertx-maven-plugin</artifactId>
        <version>${vertx.plugin.version}</version>
        <executions>
          <execution>
            <id>vertx-plugin</id>
            <goals>
              <goal>package</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <verticle>${main.verticle}</verticle>
          <runArgs>
            <runArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</runArg>
            <runArg>-Dvertx-config-path=target/test-classes/test-config.properties</runArg>
          </runArgs>
        </configuration>
      </plugin>

      <!-- The shade plug-in generates an all-in-one executable Jar file -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${shade.plugin.version}</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer
                  implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>io.vertx.core.Launcher</Main-Class>
                    <Main-Verticle>${main.verticle}</Main-Verticle>
                  </manifestEntries>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                  <resource>META-INF/services/io.vertx.core.spi.VerticleFactory</resource>
                </transformer>
              </transformers>
              <artifactSet>
                <!-- Exclude duplicate dependencies so we don't see the warning messages; alphabetize! -->
                <excludes>
                  <exclude>aopalliance:aopalliance</exclude>
                  <exclude>ch.qos.cal10n:cal10n-api</exclude>
                  <exclude>ch.qos.logback:logback-classic</exclude>
                  <exclude>ch.qos.logback:logback-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-core</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-kms</exclude>
                  <exclude>com.amazonaws:aws-java-sdk-s3</exclude>
                  <exclude>com.amazonaws:jmespath-java</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-annotations</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-core</exclude>
                  <exclude>com.fasterxml.jackson.core:jackson-databind</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-cbor</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-xml</exclude>
                  <exclude>com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</exclude>
                  <exclude>com.fasterxml.jackson.datatype:jackson-datatype-jdk8</exclude>
                  <exclude>com.fasterxml.jackson.datatype:jackson-datatype-jsr310</exclude>
                  <exclude>com.fasterxml.jackson.module:jackson-module-jaxb-annotations</exclude>
                  <exclude>com.github.dblock:oshi-core</exclude>
                  <exclude>com.github.fge:btf</exclude>
                  <exclude>com.github.fge:jackson-coreutils</exclude>
                  <exclude>com.github.fge:json-patch</exclude>
                  <exclude>com.github.fge:msg-simple</exclude>
                  <exclude>com.github.fge:uri-template</exclude>
                  <exclude>com.github.java-json-tools:json-schema-core</exclude>
                  <exclude>com.github.java-json-tools:json-schema-validator</exclude>
                  <exclude>com.github.oshi:oshi-core</exclude>
                  <exclude>com.github.seratch:jslack</exclude>
                  <exclude>com.github.seratch:jslack-api-client</exclude>
                  <exclude>com.github.seratch:jslack-app-backend</exclude>
                  <exclude>com.github.seratch:jslack-api-model</exclude>
                  <exclude>com.google.guava:guava</exclude>
                  <exclude>com.google.inject:guice</exclude>
                  <exclude>com.googlecode.libphonenumber:libphonenumber</exclude>
                  <exclude>com.google.code.gson:gson</exclude>
                  <exclude>com.networknt:json-schema-validator</exclude>
                  <exclude>com.nike.moirai:moirai-core</exclude>
                  <exclude>com.nike.moirai:moirai-typesafeconfig</exclude>
                  <exclude>com.opencsv:opencsv</exclude>
                  <exclude>com.squareup.okhttp3:okhttp</exclude>
                  <exclude>com.squareup.okio:okio</exclude>
                  <exclude>com.typesafe:config</exclude>
                  <exclude>commons-codec:commons-codec</exclude>
                  <exclude>commons-collections:commons-collections</exclude>
                  <exclude>commons-io:commons-io</exclude>
                  <exclude>commons-logging:commons-logging</exclude>
                  <exclude>commons-beanutils:commons-beanutils</exclude>
                  <exclude>info.freelibrary:freelib-utils</exclude>
                  <exclude>info.freelibrary:vertx-pairtree</exclude>
                  <exclude>info.freelibrary:vertx-super-s3</exclude>
                  <exclude>io.netty:netty-buffer</exclude>
                  <exclude>io.netty:netty-codec-dns</exclude>
                  <exclude>io.netty:netty-codec-http2</exclude>
                  <exclude>io.netty:netty-codec-http</exclude>
                  <exclude>io.netty:netty-codec-socks</exclude>
                  <exclude>io.netty:netty-codec</exclude>
                  <exclude>io.netty:netty-common</exclude>
                  <exclude>io.netty:netty-handler-proxy</exclude>
                  <exclude>io.netty:netty-handler</exclude>
                  <exclude>io.netty:netty-resolver-dns</exclude>
                  <exclude>io.netty:netty-resolver</exclude>
                  <exclude>io.netty:netty-transport</exclude>
                  <exclude>io.netty:netty-transport-native-epoll</exclude>
                  <exclude>io.netty:netty-transport-native-unix-common</exclude>
                  <exclude>io.swagger.core.v3:swagger-annotations</exclude>
                  <exclude>io.swagger.core.v3:swagger-core</exclude>
                  <exclude>io.swagger.core.v3:swagger-models</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-core</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v2-converter</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser-v3</exclude>
                  <exclude>io.swagger.parser.v3:swagger-parser</exclude>
                  <exclude>io.swagger:swagger-annotations</exclude>
                  <exclude>io.swagger:swagger-compat-spec-parser</exclude>
                  <exclude>io.swagger:swagger-core</exclude>
                  <exclude>io.swagger:swagger-models</exclude>
                  <exclude>io.swagger:swagger-parser</exclude>
                  <exclude>io.vertx:vertx-auth-common</exclude>
                  <exclude>io.vertx:vertx-bridge-common</exclude>
                  <exclude>io.vertx:vertx-config</exclude>
                  <exclude>io.vertx:vertx-core</exclude>
                  <exclude>io.vertx:vertx-web-api-contract</exclude>
                  <exclude>io.vertx:vertx-web-client</exclude>
                  <exclude>io.vertx:vertx-web-common</exclude>
                  <exclude>io.vertx:vertx-web</exclude>
                  <exclude>jakarta.activation:jakarta.activation-api</exclude>
                  <exclude>jakarta.xml.bind:jakarta.xml.bind-api</exclude>
                  <exclude>jakarta.validation:jakarta.validation-api</exclude>
                  <exclude>javax.activation:activation</exclude>
                  <exclude>javax.annotation:jsr250-api</exclude>
                  <exclude>javax.enterprise:cdi-api</exclude>
                  <exclude>javax.inject:javax.inject</exclude>
                  <exclude>javax.mail:mailapi</exclude>
                  <exclude>javax.validation:validation-api</exclude>
                  <exclude>javax.xml.bind:jaxb-api</exclude>
                  <exclude>joda-time:joda-time</exclude>
                  <exclude>net.iharder:base64</exclude>
                  <exclude>net.java.dev.jna:jna-platform</exclude>
                  <exclude>net.java.dev.jna:jna</exclude>
                  <exclude>net.sf.jopt-simple:jopt-simple</exclude>
                  <exclude>org.apache.commons:commons-collections4</exclude>
                  <exclude>org.apache.commons:commons-lang3</exclude>
                  <exclude>org.apache.commons:commons-text</exclude>
                  <exclude>org.apache.httpcomponents:httpclient</exclude>
                  <exclude>org.apache.httpcomponents:httpcore</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-api</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-impl</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-spi</exclude>
                  <exclude>org.apache.maven.resolver:maven-resolver-util</exclude>
                  <exclude>org.apache.maven.shared:maven-shared-utils</exclude>
                  <exclude>org.apache.maven:maven-artifact</exclude>
                  <exclude>org.apache.maven:maven-builder-support</exclude>
                  <exclude>org.apache.maven:maven-core</exclude>
                  <exclude>org.apache.maven:maven-model-builder</exclude>
                  <exclude>org.apache.maven:maven-model</exclude>
                  <exclude>org.apache.maven:maven-plugin-api</exclude>
                  <exclude>org.apache.maven:maven-repository-metadata</exclude>
                  <exclude>org.apache.maven:maven-resolver-provider</exclude>
                  <exclude>org.apache.maven:maven-settings-builder</exclude>
                  <exclude>org.apache.maven:maven-settings</exclude>
                  <exclude>org.codehaus.plexus:plexus-classworlds</exclude>
                  <exclude>org.codehaus.plexus:plexus-component-annotations</exclude>
                  <exclude>org.codehaus.plexus:plexus-interpolation</exclude>
                  <exclude>org.codehaus.plexus:plexus-utils</exclude>
                  <exclude>org.codehaus.woodstox:stax2-api</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.inject</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus.site</exclude>
                  <exclude>org.eclipse.sisu:org.eclipse.sisu.plexus</exclude>
                  <exclude>org.glassfish:javax.json</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-api</exclude>
                  <exclude>org.jboss.forge.roaster:roaster-jdt</exclude>
                  <exclude>org.jruby.jcodings:jcodings</exclude>
                  <exclude>org.jruby.joni:joni</exclude>
                  <exclude>org.mozilla:rhino</exclude>
                  <exclude>org.slf4j:slf4j-api</exclude>
                  <exclude>org.slf4j:slf4j-ext</exclude>
                  <exclude>org.sonatype.plexus:plexus-cipher</exclude>
                  <exclude>org.sonatype.plexus:plexus-sec-dispatcher</exclude>
                  <exclude>org.yaml:snakeyaml</exclude>
                  <exclude>software.amazon.ion:ion-java</exclude>
                  <exclude>uk.co.lucasweb:aws-v4-signer-java</exclude>
                  <exclude>com.fasterxml.woodstox:woodstox-core</exclude>
                </excludes>
              </artifactSet>
              <outputFile>${project.build.directory}/build-artifact/${project.artifactId}-${project.version}.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Sets the prepare_release scripts to be executable -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
      </plugin>
    </plugins>
  </build>

  <!-- A live testing mode that will spin up the server locally when the following is run: mvn -Plive test -->
  <profiles>
    <profile>
      <id>linux-os</id>
      <activation>
        <os>
          <family>unix</family>
          <arch>amd64</arch>
        </os>
      </activation>
      <dependencies>
        <dependency>
          <groupId>io.netty</groupId>
          <artifactId>netty-transport-native-epoll</artifactId>
          <version>${netty.epoll.version}</version>
          <classifier>linux-x86_64</classifier>
        </dependency>
      </dependencies>
    </profile>
    <profile>
      <id>live</id>
      <properties>
        <maven.test.skip>true</maven.test.skip>
        <jacoco.skip>true</jacoco.skip>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <executions>
              <execution>
                <id>copy-logging-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/main/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>logback.xml</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
              <execution>
                <id>copy-application-config-for-testing</id>
                <phase>test</phase>
                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <outputDirectory>${basedir}/target/test-classes/</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/src/test/resources</directory>
                      <filtering>true</filtering>
                      <includes>
                        <include>test-config.properties</include>
                      </includes>
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>io.reactiverse</groupId>
            <artifactId>vertx-maven-plugin</artifactId>
            <version>${vertx.plugin.version}</version>
            <executions>
              <execution>
                <id>vertx-plugin</id>
                <phase>test</phase>
                <goals>
                  <goal>run</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <verticle>${main.verticle}</verticle>
              <redeploy>${live.test.reloads}</redeploy>
              <runArgs>
                <!-- This setting is only for debugging purposes -->
                <runArg>-Dvertx.options.blockedThreadCheckInterval=999999</runArg>
                <!-- This configures the application -->
                <runArg>-Dvertx-config-path=target/test-classes/test-config.properties</runArg>
              </runArgs>
              <jvmArgs>
                <!-- This configures the logging for our application -->
                <jvmArg>-Dvertx.logger-delegate-factory-class-name=io.vertx.core.logging.SLF4JLogDelegateFactory</jvmArg>
              </jvmArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!--A profile that builds Kakadu's proprietary source code -->
    <profile>
      <id>kakadu</id>
      <activation>
        <property>
          <name>kakadu.version</name>
        </property>
      </activation>
      <properties>
        <artifact.qualifier>-ucla</artifact.qualifier>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-scm-plugin</artifactId>
            <version>${scm.plugin.version}</version>
            <executions>
              <execution>
                <id>kakadu-checkout</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>checkout</goal>
                </goals>
                <configuration>
                  <checkoutDirectory>${basedir}/src/main/docker/kakadu</checkoutDirectory>
                  <connectionUrl>${kakadu.git.repo}</connectionUrl>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <!-- Failsafe runs the project's integration tests -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <includes>
                <include>**/*FT.java</include>
                <include>**/*IT.java</include>
              </includes>
              <systemPropertyVariables>
                <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
                <http.port>${http.port}</http.port>
                <jdk.tls.client.protocols>TLSv1.2</jdk.tls.client.protocols>
                <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
              </systemPropertyVariables>
              <argLine>${jacoco.agent.arg}</argLine>
              <skipTests>${skipITs}</skipTests>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>missing-kakadu</id>
      <activation>
        <property>
          <name>!kakadu.version</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <includes>
                <include>**/*FT.java</include>
                <include>**/*IT.java</include>
              </includes>
              <excludes>
                <!-- Don't run Kakadu tests if we don't have it installed -->
                <exclude>**/*KakaduIT.java</exclude>
              </excludes>
              <systemPropertyVariables>
                <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.SLF4JLogDelegateFactory</vertx.logger-delegate-factory-class-name>
                <http.port>${http.port}</http.port>
                <jdk.tls.client.protocols>TLSv1.2</jdk.tls.client.protocols>
                <vertx-config-path>${project.basedir}/target/test-classes/test-config.properties</vertx-config-path>
              </systemPropertyVariables>
              <argLine>${jacoco.agent.arg}</argLine>
              <skipTests>${skipITs}</skipTests>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <!-- The default build profile that we use, contains pinned versions of container dependencies -->
    <profile>
      <id>default</id>
      <activation>
        <activeByDefault>true</activeByDefault>
        <property>
          <name>!unpinned</name>
        </property>
      </activation>
      <properties>
        <openjdk.version>=11.0.8+10-0ubuntu1~20.04</openjdk.version>
        <gcc.version>=4:9.3.0-1ubuntu2</gcc.version>
        <make.version>=4.2.1-1.2</make.version>
        <libtiff.version>=4.1.0+git191117-2build1</libtiff.version>
        <build.essential.version>=12.8ubuntu1</build.essential.version>
        <libopenjp2.version>=2.3.1-1ubuntu4</libopenjp2.version>
        <git.version>=1:2.20.1-2+deb10u3</git.version>
        <curl.version>=7.68.0-1ubuntu2.2</curl.version>
        <python2.version>=2.7.17-2ubuntu4</python2.version>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.version}</version>
            <executions>
              <execution>
                <id>docker-deploy</id>
                <phase>deploy</phase>
                <goals>
                  <goal>push</goal>
                </goals>
                <configuration>
                  <images>
                    <image>
                      <!-- Registry account, if supplied, must end in a slash (e.g. "account/") -->
                      <!-- The %l at the end translates to "latest" if version ends in "-SNAPSHOT" -->
                      <name>${docker.registry.account}${project.artifactId}${artifact.qualifier}:%l</name>
                    </image>
                  </images>
                  <authConfig>
                    <username>${docker.registry.username}</username>
                    <password>${docker.registry.password}</password>
                  </authConfig>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- A profile that builds an unpinned versions of the Bucketeer container's dependencies -->
    <profile>
      <id>unpinned</id>
      <activation>
        <property>
          <name>unpinned</name>
        </property>
      </activation>
      <properties>
        <openjdk.version></openjdk.version>
        <gcc.version></gcc.version>
        <make.version></make.version>
        <libtiff.version></libtiff.version>
        <build.essential.version></build.essential.version>
        <libopenjp2.version></libopenjp2.version>
        <git.version></git.version>
        <curl.version></curl.version>
        <python2.version></python2.version>
      </properties>
    </profile>
  </profiles>

  <parent>
    <artifactId>freelib-parent</artifactId>
    <groupId>info.freelibrary</groupId>
    <version>5.2.1</version>
  </parent>

</project>

